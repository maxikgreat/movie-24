import { renderHook } from '@testing-library/react-hooks';import { snapshot_UNSTABLE, RecoilRoot, useRecoilState } from 'recoil';import moment from 'moment';import { useEffect } from 'react';import faker from 'faker';import { currentMovieState, applyDefaultValues, CurrentMovieState } from './currentMovieState';describe('Current movie state', () => {  it('should handle default state', () => {    const initialSnapshot = snapshot_UNSTABLE();    expect(initialSnapshot.getLoadable(currentMovieState).valueOrThrow())      .toEqual(applyDefaultValues());  });  it('should set/get state values', () => {    const changedState: CurrentMovieState = {      loading: false,      item: {        id: 1,        backdropPath: faker.random.image(),        releaseDate: moment(faker.date.future()),        firstAirDate: moment(faker.date.future()),        genres: [{          id: 1,          name: faker.name.findName()        }],        inProduction: false,        name: faker.name.findName(),        overview: faker.lorem.sentences(),        posterPath: faker.random.image(),        tagline: faker.lorem.words(),        voteAverage: 4,        createdBy: faker.name.findName(),        budget: 50000      },      error: null    };    const { result } = renderHook(() => {      const [state, setState] = useRecoilState(currentMovieState);      useEffect(() => {        setState({          ...applyDefaultValues(),          ...changedState        });      }, [setState]);      return state;    }, {      wrapper: RecoilRoot    });    expect(result.current).toEqual({      ...applyDefaultValues(),      ...changedState    });  });});export {};