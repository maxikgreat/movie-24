import { atom, RecoilState } from 'recoil';import { Moment } from 'moment';export const categories = <const>[  // 'movie',  'tv'];export type Movie = {  id: number,  posterPath: string,  title: string,  overview: string,  releaseDate: Moment | null,  firstAirDate: Moment | null,  voteAverage: number,};export type MovieCategory = {  loading: boolean;  silentLoading: boolean;  list: Movie[];  error: string | null,  page: number,  totalPages: number,};export type MoviesState = {  // eslint-disable-next-line no-unused-vars  [key in typeof categories[number]]: MovieCategory;};const applyDefaultValues = (): MoviesState =>  <MoviesState>Object.values(categories).reduce((acc, item) => ({    ...acc,    [item]: {      loading: false,      silentLoading: false,      list: [],      error: null,      page: 1,      totalPages: null    }  }), {});type Genre = {  id: number,  name: string,};export type CurrentItem = {  id: number,  backdropPath: string,  releaseDate: Moment | null,  firstAirDate: Moment | null  genres: Genre [],  inProduction: boolean,  name: string,  overview: string,  posterPath: string,  tagline: string,  voteAverage: number};export type CurrentMovieState = {  loading: boolean,  item: CurrentItem | null,  error: string | null,};export const moviesState: RecoilState<MoviesState> = atom({  key: 'moviesState',  default: applyDefaultValues()});// generic doesn't work here, i don't know whyexport const currentMovieState = atom({  key: 'currentMovieState',  default: {    loading: false,    item: null,    error: null  } as CurrentMovieState});