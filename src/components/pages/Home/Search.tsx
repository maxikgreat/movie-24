import React, { useEffect, VFC, useRef } from 'react';import Slider from 'react-slick';import _ from 'lodash';import { useRecoilState } from 'recoil';import { sliderConfig } from '@configs/index';import { CardNextLoader, MovieCard } from '@components/pages/Home/index';import { searchState } from '@store/atoms';import { searchMovie } from '@store/api';const Search: VFC = () => {  const sliderRef = useRef<Slider | null>(null);  const [search, setSearch] = useRecoilState(searchState);  const searchMovieHandler = async (silent: boolean) => {    try {      setSearch((prevState) => ({        ...prevState,        error: null,        loading: !silent,        silentLoading: silent      }));      const data = await searchMovie(search.searchValue, silent ? search.page + 1 : 1);      setSearch((prevState) => ({        ...prevState,        loading: false,        silentLoading: false,        results: silent ? [...search.results, ...data.results] : data.results,        totalPages: data.total_pages,        page: silent ? search.page + 1 : 1      }));    } catch (err) {      setSearch((prevState) => ({        ...prevState,        loading: false,        silentLoading: false,        error: err.message      }));    }  };  useEffect(() => {    if (search.searchValue === '') return;    searchMovieHandler(false);  }, [search.searchValue]);  return (    <div className="carousel-container mb-8">      <h2 className="text-4xl px-4 uppercase">Search</h2>      {(search.loading && !search.error) && (        <Slider          {...sliderConfig}          autoplay={false}          arrows={false}        >          {_.times(6, movie => (            <MovieCard key={movie}/>          ))}        </Slider>      )}      {(!search.loading && !search.error) && (        <Slider          {...sliderConfig}          autoplay={false}          ref={sliderRef}          afterChange={(props) => {            if (!sliderRef.current) return;            // state.breakpoint no in docs            // @ts-expect-error            const point = sliderRef.current.props.responsive.find(point => point.breakpoint === sliderRef.current.state.breakpoint as number);            // @ts-expect-error            if (props + (point?.settings?.slidesToShow ?? sliderRef.current.props.slidesToShow) === search.results.length) {              searchMovieHandler(true);            }          }}        >          {search.results.map((movie) => (            <MovieCard              category={'movie'}              key={movie.id}              movie={movie}            />          ))}          {search.silentLoading && <CardNextLoader />}        </Slider>      )}    </div>  );};export default Search;