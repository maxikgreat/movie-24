/* eslint-disable */import React, {useEffect, useState, useRef, VFC} from 'react';import Slider from 'react-slick';import _ from 'lodash';// import Carousel from '@brainhubeu/react-carousel';import {useRecoilValue, useRecoilState} from 'recoil';import {MovieCard} from '@components/pages/Home';import {sliderConfig} from '@configs/index';// import { moviesState } from '@store/atoms';import {moviesCategory} from '@store/selectors';import axios from '@services/axios';import {fetchMoviesByCategory} from '@store/api';import {moviesState} from '@store/atoms';interface MoviesCarouselProps {  name: string,  index: number,}const MoviesCarousel: VFC<MoviesCarouselProps> = ({name, index}) => {  const sliderRef = useRef<Slider>(null);    const [movies, setMovies] = useRecoilState(moviesState);    const fetchMoviesHandler = async () => {    try {      setMovies((prevState) => ({        ...prevState,        popular: {          ...prevState.popular,          loading: true,        }      }));            const data = await fetchMoviesByCategory();            setMovies((prevState) => ({        ...prevState,        popular: {          ...prevState.popular,          loading: false,          list: data.results,        }      }));    } catch (err) {      setMovies((prevState) => ({        ...prevState,        popular: {          ...prevState.popular,          loading: false,          error: err,        }      }));    }  }    useEffect(() => {    fetchMoviesHandler();  }, []);    useEffect(() => {    setTimeout(() => sliderRef.current?.slickNext(), 200);  }, [sliderRef.current]);    return (    <div className={index ? 'mt-8' : ''}>      <h3 className="text-2xl px-4">{name}</h3>      {movies.popular.loading && (        <Slider          {...sliderConfig}          autoplay={false}          arrows={false}        >          {_.times(6, (movie => (            <MovieCard key={movie}/>          )))}        </Slider>      )}            {movies.popular.error && (        <h2>Error</h2>      )}            {(!movies.popular.loading && !movies.popular.error)      && (        <Slider {...sliderConfig}>          {movies.popular.list.map((movie) => (            <MovieCard              key={movie.release_date.unix()}              movie={movie}            />          ))}        </Slider>      )}      <hr/>    </div>  );};export default MoviesCarousel;