import React, { useEffect, VFC } from 'react';import { useParams, Redirect } from 'react-router-dom';import { useRecoilState } from 'recoil';import { categories as storeCategories, categories, currentMovieState } from '@store/atoms';import { fetchItemById } from '@store/api';import { CurrentItemDetails } from '@components/pages/CurrentItem';import CurrentItemSkeleton from '@components/pages/CurrentItem/CurrentItemSkeleton';import { Error } from '@components/common';const CurrentItem: VFC = () => {  const { category, id } = useParams<{    category: typeof storeCategories[number],    id: string  }>();  if (!categories.includes(category as typeof storeCategories[number])) {    return <Redirect to="/" />;  }  const [currentItem, setCurrentItem] = useRecoilState(currentMovieState);  const fetchItemByIdHandler = async () => {    try {      setCurrentItem((prevState) => ({        ...prevState,        loading: true,        error: null      }));      const data = await fetchItemById(category, id);      setCurrentItem((prevState) => ({        ...prevState,        item: data,        loading: false      }));    } catch (err) {      setCurrentItem((prevState) => ({        ...prevState,        error: err.message,        loading: false      }));    }  };  useEffect(() => {    fetchItemByIdHandler();    return () => {      setCurrentItem({        loading: false,        item: null,        error: null      });    };  }, []);  return (    <section>      {(currentItem.item && !currentItem.loading && !currentItem.error) && (        <CurrentItemDetails          item={currentItem.item}        />      )}      {(currentItem.loading && !currentItem.error) && (        <CurrentItemSkeleton />      )}      {(!currentItem.loading && currentItem.error) && (        <Error message={currentItem.error} tryAgain={fetchItemByIdHandler} />      )}    </section>  );};export default CurrentItem;